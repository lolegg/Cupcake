<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ assembly name="$(ProjectDir)bin\CommunityServiceInfo.Model.dll" #>
<#@ assembly name="$(ProjectDir)bin\CommunityServiceInfo.Admin.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="CommunityServiceInfo.Model" #>
<#@ output extension=".txt" #>
<#
	//parameters
	var viewModelType=typeof(CommunityServiceInfo.Admin.Models.ElderlyPersonInfoModel);
	var conditionType=typeof(CommunityServiceInfo.Model.ElderlyPersonCondition);
	var title="老人";
	var controlerName="ElderlyPerson";
	var listModelClassName="ElderlyPersonInfoListModel";
#>
@model CommunityServiceInfo.Admin.Models.<#= listModelClassName #>
@using CommunityServiceInfo.Admin
@using CommunityServiceInfo.Model
@{
    ViewBag.Title = "<#= title #>";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

@section breadcrumb{
<li>
    <a href="#">设置</a>
</li>
<li class="active"><#= title #></li>
}

@section head
{    
}

<div class="row">
    <div class="col-sm-12">
        <div class="well with-header">
            <div class="header bordered-info">
                <#= title #>列表
            </div>
            <div class="table-toolbar">
                @using (Html.BeginForm())
                {
                    @Html.AntiForgeryToken()
					<# var i=0;var a=false; #>
					<#foreach (ModelProperty property in GetModelProperties(conditionType)) {#>
					<# if(i%2==0){ #>
                    <div class="row">
					<# a=false; #>
					<# } #>
					<div class="col-sm-6">
					<div class="form-group">
                    <div class="input-group">
						<label class="input-group-addon" for="<#= property.Name #>"></label>    
						<# if (property.UnderlyingType.BaseType==typeof(Enum)) {#>
							@Html.Editor("<#= property.Name #>", "Enum4Bootstrap", new { selectList = EnumExtensions.GetSelectList(typeof(<#= property.Name #>)) })
						<# }else { #>
                        @Html.Editor("<#= property.Name #>", "String4Bootstrap")
                        <# } #>
                    </div>
					</div>
					</div>  
                    <# if(i%2!=0){ #>
                    </div>
					<# a=true; #>
					<# } #>  
					<# i++; #>  
					<# } #>
					<# if(!a){ #>
                    </div>
					<# } #> 
                    <div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="controls">
                                    <div class="input-group">
                                        <label class="input-group-addon" for="BeginDate">开始时间</label>
                                        @Html.Editor("BeginDate","DateTime4Bootstrap")
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="controls">
                                    <div class="input-group">
                                        <label class="input-group-addon">结束时间</label>
                                        @Html.Editor("EndDate", "DateTime4Bootstrap")
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                    <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group" style="float:right">
                                <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i>查 找</button>
                                <button type="button" class="btn btn-primary" onclick="showPanel('/<#= controlerName #>/Create')"><i class="fa fa-plus"></i>添 加</button>
                            </div>
                        </div>
                    </div>
                }
            </div>
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
						<# var f=true; #>
						<#foreach (ModelProperty property in GetModelProperties(viewModelType)) {#>
						<# if(f){ #>
                            <th>
                                
                            </th>
							<# f=false; #>
							<# }else { #>
                            <th class="hidden-xs">
                                
                            </th>
							<# }} #>
                        <th>操作</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.List)
                    {
                        <tr>
						<# var flag=true; #>
						<#foreach (ModelProperty property in GetModelProperties(viewModelType)) {#>
						<# if(flag){ #>
                            <td>
                                <a href="#" onclick="showPanel('/<#= controlerName #>/Details/@item.Id')">@item.<#= property.Name #></a>
                            </td>
							<# flag=false; #>
							<# }else { #>
                            <td class="hidden-xs">
                                @item.<#= property.Name #>
                            </td>
							<# }} #>
                            <td>  
                                @Html.LinkButton("编辑", "showPanel('/<#= controlerName #>/Edit/" + item.Id + "')", "fa-edit")
                                @Html.LinkButton("删除", "disable('/<#= controlerName #>/Delete/" + item.Id + "')", "fa-trash-o")
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row DTTTFooter">
                <div class="col-sm-6">
                    <div class="dataTables_info">
                        @Html.PagingInfo(Model.Paging)
                    </div>
                </div>
                <div class="col-sm-6">
                    <div class="dataTables_paginate paging_bootstrap">
                        @Html.Pager(Model.Paging)
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>

@section scripts{
    <script src="~/Content/js/datetime/moment.js"></script>
    <script>
    $(document).ready(function () {
        $('#BeginDate').datepicker();
		$('#EndDate').datepicker(); 
    });
    </script>
}

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
		typeof(Enum)
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    return results;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
		
        results.Add(new ModelProperty {
            Name = prop.Name,
            UnderlyingType = underlyingType,
            IsPrimaryKey = IsPrimaryKey(prop),
        });
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
	return true;
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

#>