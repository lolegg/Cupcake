<#@ template language="C#" HostSpecific="True" #>
<#@ output extension=".cshtml" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="Microsoft.VisualStudio.Web.Mvc.Scaffolding.BuiltIn" #>
<#
MvcTextTemplateHost mvcHost = MvcTemplateHost;
#>
@model <#= mvcHost.ViewDataTypeName #>
@using Cupcake.Web
@using Cupcake.Core.Domain

@{
    ViewBag.Title = "<#= mvcHost.ViewName#>";
    Layout = "~/Views/Shared/_Layout.cshtml";
}
@section head{
    <link href="~/Content/css/dataTables.bootstrap.css" rel="stylesheet" />
}

<div class="row">
    <div class="col-xs-12 col-md-12">
        <div class="well with-header">
            <div class="header bordered-info">
                列表
            </div>
            <div class="table-toolbar">
                @using (Html.BeginForm("List", "User", FormMethod.Post, new { @class = "" }))
                {
                    @Html.AntiForgeryToken()
					<div class="row">
<#
foreach (ModelProperty property in GetModelProperties(mvcHost.ViewDataType)) {
    if (!property.IsPrimaryKey && !property.IsReadOnly && property.Scaffold) {
#>
        <div class="col-lg-6">
        <div class="form-group">
         <div class="input-group">
<#
        if (property.IsForeignKey) {
#>
            @Html.LabelFor(model => model.<#= property.Name #>, "<#= property.AssociationName #>")
<#
        } else {
#>
           @Html.Label("<#= property.Name #>", "", new { @class = "input-group-addon" })
           @Html.TextBox("<#= property.Name #>", "", new { @class = "form-control", placeholder = "请输入" })
<#
        }
#>
        </div>
		</div>
		</div>
<#
    }
}
#>
</div>
<div class="row">
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="controls">
                                    <div class="input-group">
                                        <label class="input-group-addon">开始时间</label>
                                        <input class="form-control date-picker" name="BeginDate" id="BeginDate" type="text" data-date-format="yyyy-mm-dd">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                        <div class="col-sm-6">
                            <div class="form-group">
                                <div class="controls">
                                    <div class="input-group">
                                        <label class="input-group-addon">结束时间</label>
                                        <input class="form-control date-picker" name="EndDate" id="EndDate" type="text" data-date-format="yyyy-mm-dd">
                                        <span class="input-group-addon">
                                            <i class="fa fa-calendar"></i>
                                        </span>
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
        <div class="row">
                        <div class="col-sm-12">
                            <div class="form-group" style="float:right">
                                <button type="submit" class="btn btn-primary"><i class="fa fa-search"></i>查找</button>
                                <button type="button" onclick="CreateUser();" class="btn btn-primary"><i class="fa fa-plus"></i>添加</button>
                            </div>
                        </div>
                    </div>
}
</div>
<table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr>
                        <th>
                            xxx
                        </th>
                        <th class="hidden-xs">
                            xxx
                        </th>
                        <th></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var item in Model.List)
                    {
                        <tr>
                            <td>
                                <a href="/xxx/Details/@item.Id">@item.xxx</a>
                            </td>
                            <td class="hidden-xs">
                                @item.xxx
                            </td>
                            <td>
                                <a href="javascript:void(0);" class="linkbtn" onclick="EditUser('@item.Id');"><i class="fa fa-edit fa-fw fa-lg"></i></a>
                                <a href="javascript:void(0);" id="bootbox-confirm" class="linkbtn" onclick="DisableUser('@item.Id');"><i class="fa fa-trash-o fa-fw fa-lg"></i></a>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
            <div class="row DTTTFooter">
                <div class="col-lg-6">
                    <div class="dataTables_info">
                        @Html.PagingInfo(Model.Paging)
                    </div>
                </div>
                <div class="col-lg-6">
                    <div class="dataTables_paginate paging_bootstrap hidden-xs">
                        @Html.Pager(Model.Paging)
                    </div>
                </div>
            </div>
    </div>
</div>
</div>

@section scripts{
    <!--Bootstrap Date Range Picker-->
    <script src="~/Content/js/datetime/moment.js"></script>
    <script src="~/Content/js/datetime/bootstrap-datepicker.js"></script>
    <script src="~/Content/js/bootbox/bootbox.js"></script>
<script src="~/Content/js/toastr/toastr.js"></script>
    <script>
    $(document).ready(function () {
        var beginDate = $('#BeginDate').datepicker().on('changeDate', function (ev) {
            beginDate.hide();
        }).data('datepicker');
        @if (ViewBag.UserCondition.BeginDate!=null)
	    {
		    @:$('#BeginDate').datepicker('setValue', '@ViewBag.UserCondition.BeginDate.ToString("yyyy-MM-dd")');
        }

        var endDate = $('#EndDate').datepicker().on('changeDate', function (ev) {
            endDate.hide();
        }).data('datepicker');
        @if (ViewBag.UserCondition.EndDate != null)
        {
            @:$('#EndDate').datepicker('setValue', '@ViewBag.UserCondition.EndDate.ToString("yyyy-MM-dd")');
        }
    });

    function assignRoles(id) {
        $.jsPanel({
            size: 'auto',
            position: { left: "center", top: 50 },
            theme: 'light',
            iframe: {
                src: '/User/AssignRoles?userId=' + id,
                width: 700,
                height: 500
            }
        });
    }
    function CreateUser() {
        //$("#example").dialog({ autoOpen: true, modal: true, width: 500, height: 500, title: "添加新用户" });
        //$("#example").html("");
        //var pymParent = pym.Parent('example', '/User/Create', {});
        $.jsPanel({
            size: 'auto',
            position: { left: "center", top: 50 },
            theme: 'light',
            iframe: {
                src: '/User/Create',
                width: 700,
                height: 500
            }
        });
    }
    function EditUser(id) {
        //$("#example").dialog({ autoOpen: true, modal: true, width: 500, height: 500, title: "编辑用户" });
        //$("#example").html("");
        //var pymParent = pym.Parent('example', '/User/Edit/' + id, {});
        $.jsPanel({
            size: 'auto',
            position: { left: "center", top: 50 },
            theme: 'light',
            iframe: {
                src: '/User/Edit/' + id,
                width: 700,
                height: 500
            }
        });
    }
    function DisableUser(id) {
        bootbox.confirm("确定禁用该用户吗?", function (result) {
            if (result) {
                $.post("/User/Delete/" + id, function (data) {
                    Notify('禁用成功', 'bottom-right', '5000', 'success', 'fa-list', true);
                    location.reload();
                });
            }
        });       
    }
    </script>
}

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public string AssociationName { get; set; }
    public string ValueExpression { get; set; }
    public string ModelValueExpression { get; set; }
    public string ItemValueExpression { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
    public bool IsForeignKey { get; set; }
    public bool IsReadOnly { get; set; }
    public bool Scaffold { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    
    foreach (ModelProperty prop in results) {
        if (prop.UnderlyingType == typeof(double) || prop.UnderlyingType == typeof(decimal)) {
            prop.ModelValueExpression = "String.Format(\"{0:F}\", " + prop.ModelValueExpression + ")";
        }
        else if (prop.UnderlyingType == typeof(DateTime)) {
            prop.ModelValueExpression = "String.Format(\"{0:g}\", " + prop.ModelValueExpression + ")";
        }
    }

    return results;
}

// Call this to determine if property has scaffolding enabled
bool Scaffold(PropertyInfo property) {
    foreach (object attribute in property.GetCustomAttributes(true)) {
        var scaffoldColumn = attribute as ScaffoldColumnAttribute;
        if (scaffoldColumn != null && !scaffoldColumn.Scaffold) {
            return false;
        }
    }
    return true;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Call this to determine if the property represents a foreign key.
bool IsForeignKey(PropertyInfo property) {
    return MvcTemplateHost.RelatedProperties.ContainsKey(property.Name);
}

// A foreign key, e.g. CategoryID, will have a value expression of Category.CategoryID
string GetValueExpressionSuffix(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName + "." + propertyModel.DisplayPropertyName : property.Name;
}

// A foreign key, e.g. CategoryID, will have an association name of Category
string GetAssociationName(PropertyInfo property) {
    RelatedModel propertyModel;
    MvcTemplateHost.RelatedProperties.TryGetValue(property.Name, out propertyModel);

    return propertyModel != null ? propertyModel.PropertyName : property.Name;
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
        if (prop.GetGetMethod() != null && prop.GetIndexParameters().Length == 0 && IsBindableType(underlyingType)) {
            string valueExpression = GetValueExpressionSuffix(prop);

            results.Add(new ModelProperty {
                Name = prop.Name,
                AssociationName = GetAssociationName(prop),
                ValueExpression = valueExpression,
                ModelValueExpression = "Model." + valueExpression,
                ItemValueExpression = "item." + valueExpression,
                UnderlyingType = underlyingType,
                IsPrimaryKey = IsPrimaryKey(prop),
                IsForeignKey = IsForeignKey(prop),
                IsReadOnly = prop.GetSetMethod() == null,
                Scaffold = Scaffold(prop)
            });
        }
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

MvcTextTemplateHost MvcTemplateHost {
    get {
        return (MvcTextTemplateHost)Host;
    }
}
#>