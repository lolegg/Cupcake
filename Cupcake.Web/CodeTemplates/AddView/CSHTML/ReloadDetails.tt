<#@ template debug="false" hostspecific="false" language="C#" #>
<#@ assembly name="System.ComponentModel.DataAnnotations" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="System.Data.Entity" #>
<#@ assembly name="System.Data.Linq" #>
<#@ assembly name="$(ProjectDir)bin\CommunityServiceInfo.Admin.dll" #>
<#@ import namespace="System" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.ComponentModel.DataAnnotations" #>
<#@ import namespace="System.Data.Linq.Mapping" #>
<#@ import namespace="System.Data.Objects.DataClasses" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Reflection" #>
<#@ output extension=".txt" #>
<#
	//parameters
	var type=typeof(CommunityServiceInfo.Admin.Models.ElderlyPersonInfoModel);
#>
@model CommunityServiceInfo.Admin.Models.<#= type.Name #>
@using CommunityServiceInfo.Admin
@using CommunityServiceInfo.Model
@{
    ViewBag.Title = "Detail";
    Layout = "~/Views/Shared/_Form.cshtml";
}

<div class="row">
    <div class="col-sm-12">
        <div class="well with-header">
            <div class="header bordered-info">
                信息
            </div>
				<# var i=0;var f=false;#>
				<#foreach (ModelProperty property in GetModelProperties(type)) {#>
				<# if(i%2==0){ #>
                    <div class="row">
					<# f=false; #>
				<# } #>
				<div class="col-xs-6">
                <div class="form-group">
                    <div class="input-group">
                        @Html.LabelFor(model => model.<#= property.Name #>, new { @class = "input-group-addon" })
                        @Html.TextBoxFor(m => m.<#= property.Name #>, new { @readonly = "true", @class = "form-control" })
                    </div>
                </div>
				</div>
				<# if(i%2!=0){ #>
                    </div>
					<# f=true; #>
					<# } #>  
					<# i++; #>  
				<# } #>   
<# if(!f){ #>
                    </div>
					<# } #>              
        </div>
    </div>
</div>

<#+
// Describes the information about a property on the model
class ModelProperty {
    public string Name { get; set; }
    public Type UnderlyingType { get; set; }
    public bool IsPrimaryKey { get; set; }
}

// Change this list to include any non-primitive types you think should be eligible for display/edit
static Type[] bindableNonPrimitiveTypes = new[] {
    typeof(string),
    typeof(decimal),
    typeof(Guid),
    typeof(DateTime),
    typeof(DateTimeOffset),
    typeof(TimeSpan),
		typeof(Enum)
};

// Call this to get the list of properties in the model. Change this to modify or add your
// own default formatting for display values.
List<ModelProperty> GetModelProperties(Type type) {
    List<ModelProperty> results = GetEligibleProperties(type);
    return results;
}

// Call this to determine if the property represents a primary key. Change the
// code to change the definition of primary key.
bool IsPrimaryKey(PropertyInfo property) {
    if (string.Equals(property.Name, "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    if (string.Equals(property.Name, property.DeclaringType.Name + "id", StringComparison.OrdinalIgnoreCase)) {  // EF Code First convention
        return true;
    }

    foreach (object attribute in property.GetCustomAttributes(true)) {
        if (attribute is KeyAttribute) {  // WCF RIA Services and EF Code First explicit
            return true;
        }
        
        var edmScalar = attribute as EdmScalarPropertyAttribute;
        if (edmScalar != null && edmScalar.EntityKeyProperty) {  // EF traditional
            return true;
        }

        var column = attribute as ColumnAttribute;
        if (column != null && column.IsPrimaryKey) {  // LINQ to SQL
            return true;
        }
    }
    
    return false;
}

// This will return the primary key property name, if and only if there is exactly
// one primary key. Returns null if there is no PK, or the PK is composite.
string GetPrimaryKeyName(Type type) {
    IEnumerable<string> pkNames = GetPrimaryKeyNames(type);
    return pkNames.Count() == 1 ? pkNames.First() : null;
}

// This will return all the primary key names. Will return an empty list if there are none.
IEnumerable<string> GetPrimaryKeyNames(Type type) {
    return GetEligibleProperties(type).Where(mp => mp.IsPrimaryKey).Select(mp => mp.Name);
}

// Helper
List<ModelProperty> GetEligibleProperties(Type type) {
    List<ModelProperty> results = new List<ModelProperty>();

    foreach (PropertyInfo prop in type.GetProperties(BindingFlags.Public | BindingFlags.Instance)) {
        Type underlyingType = Nullable.GetUnderlyingType(prop.PropertyType) ?? prop.PropertyType;
		
        results.Add(new ModelProperty {
            Name = prop.Name,
            UnderlyingType = underlyingType,
            IsPrimaryKey = IsPrimaryKey(prop),
        });
    }

    return results;
}

// Helper
bool IsBindableType(Type type) {
	return true;
    return type.IsPrimitive || bindableNonPrimitiveTypes.Contains(type);
}

#>